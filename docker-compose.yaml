version: "3"

services:
  db-postgres:
    env_file:
      - .env
    image: postgres:16-alpine3.17
    volumes:
      - postgresql-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

  backend:
    env_file:
      - .env
    build:
      context: backend
      dockerfile: Dockerfile
    volumes:
      - ./backend/analytics:/backend
      - staticfiles:/backend/staticfiles
      - media:/backend/media
    environment:
      - POSTGRES_HOST=db-postgres
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=5432
    command: >
      sh -c 
      "python manage.py makemigrations &&
      python manage.py migrate &&
      python manage.py collectstatic --no-input &&
      gunicorn --bind 0.0.0.0 -p 8000 analytics.wsgi:application"
    depends_on:
      - db-postgres

  redis:
    container_name: Redis
    image: redis:7.0.5-alpine3.17
    hostname: redis

  celery:
    hostname: worker
    links:
      - redis
    env_file:
      - .env
    build:
      context: backend
      dockerfile: Dockerfile
    environment:
      - POSTGRES_HOST=db-postgres
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=5432
    entrypoint: celery
    command: -A celery_app.app worker --loglevel=info
    volumes:
      - ./backend/analytics:/backend
      - media:/backend/media
    depends_on:
      - redis
      - db-postgres

  nginx:
    build:
      context: nginx
      dockerfile: Dockerfile-prod
    volumes:
      - ./nginx/conf/nginx-prod.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/logs:/etc/nginx/logs
      - staticfiles:/service/static
      - media:/service/media
    ports:
      - "80:80"

volumes:
  postgresql-data:
  staticfiles:
  media:
